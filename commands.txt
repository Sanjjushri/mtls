openssl req -x509 -newkey rsa:4096 -days 365 -nodes \
  -keyout ca.key -out ca.crt \
  -subj "/CN=MyCA"



# Generate server private key and CSR
openssl req -newkey rsa:4096 -nodes -keyout server.key -out server.csr \
  -subj "/CN=localhost"

# Sign the server certificate with the CA
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \
  -CAcreateserial -out server.crt -days 365



# Generate client private key and CSR
openssl req -newkey rsa:4096 -nodes -keyout client.key -out client.csr \
  -subj "/CN=JavaClient"

# Sign the client certificate with the CA
openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key \
  -CAcreateserial -out client.crt -days 365


openssl pkcs12 -export -in client.crt -inkey client.key \
  -out client.p12 -name client -CAfile ca.crt -caname root


keytool -importkeystore -deststorepass changeit -destkeypass changeit \
  -destkeystore client.keystore -srckeystore client.p12 -srcstoretype PKCS12 \
  -alias client


keytool -import -trustcacerts -alias root -file ca.crt \
  -keystore client.truststore -storepass changeit -noprompt







# Convert client certificate and key to PKCS12 format
openssl pkcs12 -export -in client.crt -inkey client.key \
  -out client.p12 -name client -CAfile ca.crt -caname root

# Import the PKCS12 file into a Java KeyStore
keytool -importkeystore -deststorepass changeit -destkeypass changeit \
  -destkeystore client.keystore -srckeystore client.p12 -srcstoretype PKCS12 \
  -alias client



keytool -import -trustcacerts -alias root -file ca.crt \
  -keystore client.truststore -storepass changeit -noprompt



